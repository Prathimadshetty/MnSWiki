{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About Marks and Spencer - Application Security Purpose Help teams to build and operate more secure systems by incorporating Secuirty into their daily work. Audience Software Engineering Teams at M&S. Context Secure Application Checklist provides an easy to reference list of security controls that increases awareness and help engineering teams create more secure applications. It's a first step toward building a base of security knowledge around web application security. Consider using checklist to identify the minimum standard that is required to neutralize vulnerabilities in your critical applications. Why do need it? Application Security introduction What are we working on? What can go wrong? What are we going to do about it? Did we do a good job? Secure SDLC","title":"About"},{"location":"#about","text":"Marks and Spencer - Application Security","title":"About"},{"location":"#purpose","text":"Help teams to build and operate more secure systems by incorporating Secuirty into their daily work.","title":"Purpose"},{"location":"#audience","text":"Software Engineering Teams at M&S.","title":"Audience"},{"location":"#context","text":"Secure Application Checklist provides an easy to reference list of security controls that increases awareness and help engineering teams create more secure applications. It's a first step toward building a base of security knowledge around web application security. Consider using checklist to identify the minimum standard that is required to neutralize vulnerabilities in your critical applications.","title":"Context"},{"location":"#why-do-need-it","text":"Application Security introduction What are we working on? What can go wrong? What are we going to do about it? Did we do a good job? Secure SDLC","title":"Why do need it?"},{"location":"Access%20Control/","text":"... # Security Requirement CWE 1 Always apply the principle of complete mediation, forcing all requests through a common security \"gate keeper.\" This ensures that access control checks are triggered whether or not the user is authenticated. CWE-284 2 Make use of a Mandatory Access Control system. All access decisions will be based on the principle of least privilege. If not explicitly allowed then access should be denied. Additionally, after an account is created, rights must be specifically added to that account to grant access to resources. CWE-272,CWE-250 3 Do not allow direct references to files or parameters that can be manipulated to grant excessive access. Access control decisions must be based on the authenticated user identity and trusted server side information. CWE-284 4 An unvalidated forward can allow an attacker to access private content without authentication. Unvalidated redirects allow an attacker to lure victims into visiting malicious sites. Prevent these from occurring by conducting the appropriate access controls checks before sending the user to the given location. CWE-601 ...","title":"Access Control"},{"location":"Architecture/","text":"... # Security Requirement CWE 1 Verify the use of a secure software development lifecycle that addresses security in all stages of development. . 2 Verify the use of threat modeling for every design change or sprint planning to identify threats, plan for countermeasures, facilitate appropriate risk responses, and guide security testing. CWE-1053 3 Verify that all user stories and features contain functional security constraints, such as \"As a user, I should be able to view and edit my profile. I should not be able to view or edit anyone else's profile\" CWE-1110 4 Verify documentation and justification of all the application's trust boundaries, components, and significant data flows. CWE-1059 5 Verify definition and security analysis of the application's high-level architecture and all connected remote services. CWE-1059 6 Verify implementation of centralized, simple (economy of design), vetted, secure, and reusable security controls to avoid duplicate, missing, ineffective, or insecure controls. CWE-637 7 Verify availability of a secure coding checklist, security requirements, guideline, or policy to all developers and testers. CWE-637 8 Verify the use of unique or special low-privilege operating system accounts for all application components, services, and servers. CWE-250 9 Verify that communications between application components, including APIs, middleware and data layers, are authenticated. Components should have the least necessary privileges needed. CWE-306 10 Verify that the application uses a single vetted authentication mechanism that is known to be secure, can be extended to include strong authentication, and has sufficient logging and monitoring to detect account abuse or breaches. CWE-306 11 Verify that all authentication pathways and identity management APIs implement consistent authentication security control strength, such that there are no weaker alternatives per the risk of the application. CWE-306 12 Verify that trusted enforcement points such as at access control gateways, servers, and serverless functions enforce access controls. Never enforce access controls on the client. CWE-602 13 Verify that the chosen access control solution is flexible enough to meet the application's needs. CWE-284 14 Verify enforcement of the principle of least privilege in functions, data files, URLs, controllers, services, and other resources. This implies protection against spoofing and elevation of privilege. CWE-272 15 Verify the application uses a single and well-vetted access control mechanism for accessing protected data and resources. All requests must pass through this single mechanism to avoid copy and paste or insecure alternative paths. CWE-284 16 Verify that attribute or feature-based access control is used whereby the code checks the user's authorization for a feature/data item rather than just their role. Permissions should still be allocated using roles. CWE-275 17 Verify that input and output requirements clearly define how to handle and process data based on type, content, and applicable laws, regulations, and other policy compliance. CWE-1029 18 Verify that serialization is not used when communicating with untrusted clients. If this is not possible, ensure that adequate integrity controls (and possibly encryption if sensitive data is sent) are enforced to prevent deserialization attacks including object injection. CWE-502 19 Verify that input validation is enforced on a trusted service layer. CWE-602 20 Verify that output encoding occurs close to or by the interpreter for which it is intended. CWE-116 21 Verify that there is an explicit policy for management of cryptographic keys and that a cryptographic key lifecycle follows a key management standard such as NIST SP 800-57. CWE-320 22 Verify that consumers of cryptographic services protect key material and other secrets by using key vaults or API based alternatives. CWE-320 23 Verify that all keys and passwords are replaceable and are part of a well-defined process to re-encrypt sensitive data. CWE-320 24 Verify that the architecture treats client-side secrets--such as symmetric keys, passwords, or API tokens--as insecure and never uses them to protect or access sensitive data. CWE-320 25 Verify that a common logging format and approach is used across the system. CWE-1009 26 Verify that logs are securely transmitted to a preferably remote system for analysis, detection, alerting, and escalation. . 27 Verify that all sensitive data is identified and classified into protection levels. . 28 Verify that all protection levels have an associated set of protection requirements, such as encryption requirements, integrity requirements, retention, privacy and other confidentiality requirements, and that these are applied in the architecture. . 29 Verify the application encrypts communications between components, particularly when these components are in different containers, systems, sites, or cloud providers. CWE-319 30 Verify that application components verify the authenticity of each side in a communication link to prevent person-in-the-middle attacks. For example, application components should validate TLS certificates and chains. CWE-295 31 Verify that a source code control system is in use, with procedures to ensure that check-ins are accompanied by issues or change tickets. The source code control system should have access control and identifiable users to allow traceability of any changes. CWE-284 32 Verify the definition and documentation of all application components in terms of the business or security functions they provide. CWE-1059 33 Verify that all high-value business logic flows, including authentication, session management and access control, do not share unsynchronized state. CWE-362 34 Verify that all high-value business logic flows, including authentication, session management and access control are thread safe and resistant to time-of-check and time-of-use race conditions. CWE-367 35 Verify that user-uploaded files are stored outside of the web root. CWE-552 36 Verify that user-uploaded files - if required to be displayed or downloaded from the application - are served by either octet stream downloads, or from an unrelated domain, such as a cloud file storage bucket. Implement a suitable Content Security Policy (CSP) to reduce the risk from XSS vectors or other attacks from the uploaded file. CWE-646 37 Verify the segregation of components of differing trust levels through well-defined security controls, firewall rules, API gateways, reverse proxies, cloud-based security groups, or similar mechanisms. CWE-923 38 Verify that binary signatures, trusted connections, and verified endpoints are used to deploy binaries to remote devices. CWE-494 39 Verify that the build pipeline warns of out-of-date or insecure components and takes appropriate actions. CWE-1104 40 Verify that the build pipeline contains a build step to automatically build and verify the secure deployment of the application, particularly if the application infrastructure is software defined, such as cloud environment build scripts. . 41 Verify that application deployments adequately sandbox, containerize and/or isolate at the network level to delay and deter attackers from attacking other applications, especially when they are performing sensitive or dangerous actions such as deserialization. CWE-265 42 Verify the application does not use unsupported, insecure, or deprecated client-side technologies such as NSAPI plugins, Flash, Shockwave, ActiveX, Silverlight, NACL, or client-side Java applets. CWE-477 ...","title":"Architecture"},{"location":"Authentication/","text":"... # Security Requirement CWE 1 Never allow credentials to be stored directly within the application code. While it can be convenient to test application code with hardcoded credentials during development this significantly increases risk and should be avoided. CWE-798 2 Password reset systems are often the weakest link in an application. These systems are often based on the user answering personal questions to establish their identity and in turn reset the password. The system needs to be based on questions that are both hard to guess and brute force. Additionally, any password reset option must not reveal whether or not an account is valid, preventing username harvesting. CWE-640 3 For password based authentication, password policy should be created and implemented so that passwords meet specific strength criteria. If the user base and application can support it, leverage the various forms of passwordless authentication such as FIDO2 based authentication or mobile application push based authenticators. CWE-521 4 Account lockout needs to be implemented to guard against brute forcing attacks against both the authentication and password reset functionality. After several tries on a specific user account, the account should be locked for a period of time or until manually unlocked. Additionally, it is best to continue the same failure message indicating that the credentials are incorrect or the account is locked to prevent an attacker from harvesting usernames. CWE-307 5 Messages for authentication errors must be clear and, at the same time, be written so that sensitive information about the system is not disclosed. For example, error messages which reveal that the userid is valid but that the corresponding password is incorrect confirms to an attacker that the account does exist on the system. . 6 Modern web applications usually consist of multiple layers. The business logic tier (processing of information) often connects to the data tier (database). Connecting to the database, of course, requires authentication. The authentication credentials in the business logic tier must be stored in a centralized location that is locked down. The same applies to accessing APIs providing services to support your application. Scattering credentials throughout the source code is not acceptable. Some development frameworks provide a centralized secure location for storing credentials to the backend database. Secret management solutions that are cloud based or on-premise can be used to allow the application to acquire the credential at application launch or when needed, therefore securing the credentials and avoid storing them statically on disk within a server or a container image. CWE-257 7 If an application becomes compromised it is important that the application itself and any middleware services be configured to run with minimal privileges. For instance, while the application layer or business layer needs the ability to read and write data to the underlying database, administrative credentials that grant access to other databases or tables should not be provided. CWE-250 ...","title":"Authentication"},{"location":"Business%20Logic/","text":"... # Security Requirement CWE 1 Verify the application will only process business logic flows for the same user in sequential step order and without skipping steps. CWE-841 2 Verify the application will only process business logic flows with all steps being processed in realistic human time, i.e. transactions are not submitted too quickly. CWE-799 3 Verify the application has appropriate limits for specific business actions or transactions which are correctly enforced on a per user basis. CWE-770 4 Verify the application has sufficient anti-automation controls to detect and protect against data exfiltration, excessive business logic requests, excessive file uploads or denial of service attacks. CWE-770 5 Verify the application has business logic limits or validation to protect against likely business risks or threats, identified using threat modeling or similar methodologies. CWE-841 6 Verify the application does not suffer from \"Time Of Check to Time Of Use\" (TOCTOU) issues or other race conditions for sensitive operations. CWE-367 7 Verify the application monitors for unusual events or activity from a business logic perspective. For example, attempts to perform actions out of order or actions which a normal user would never attempt. CWE-754 8 Verify the application has configurable alerting when automated attacks or unusual activity is detected. CWE-390 ...","title":"Business Logic"},{"location":"Communication%20Security/","text":"... # Security Requirement CWE 1 Verify that secured TLS is used for all client connectivity, and does not fall back to insecure or unencrypted protocols. CWE-319 2 Verify using online or up to date TLS testing tools that only strong algorithms, ciphers, and protocols are enabled, with the strongest algorithms and ciphers set as preferred. CWE-326 3 Verify that old versions of SSL and TLS protocols, algorithms, ciphers, and configuration are disabled, such as SSLv2, SSLv3, or TLS 1.0 and TLS 1.1. The latest version of TLS should be the preferred cipher suite. CWE-326 4 Verify that connections to and from the server use trusted TLS certificates. Where internally generated or self-signed certificates are used, the server must be configured to only trust specific internal CAs and specific self-signed certificates. All others should be rejected. CWE-295 5 Verify that encrypted communications such as TLS is used for all inbound and outbound connections, including for management ports, monitoring, authentication, API, or web service calls, database, cloud, serverless, mainframe, external, and partner connections. The server must not fall back to insecure or unencrypted protocols. CWE-319 6 Verify that all encrypted connections to external systems that involve sensitive information or functions are authenticated. CWE-287 7 Verify that proper certification revocation, such as Online Certificate Status Protocol (OCSP) Stapling, is enabled and configured. CWE-299 8 Verify that backend TLS connection failures are logged. CWE-544 ...","title":"Communication Security"},{"location":"Configuration%20and%20Operations/","text":"... # Security Requirement CWE 1 Automating the deployment of your application, using Continuous Integration and Continuous Deployment, helps to ensure that changes are made in a consistent, repeatable manner in all environments. . 2 A rigorous change management process must be maintained during change management operations. For example, new releases should only be deployed after process. CWE-439 3 Engage the business owner to define security requirements for the application. This includes items that range from the whitelist validation rules all the way to nonfunctional requirements like the performance of the login function. Defining these requirements up front ensures that security is baked into the system. . 4 Integrating security into the design phase saves money and time. Conduct a risk review with security professionals and threat model the application to identify key risks. The helps you integrate appropriate countermeasures into the design and architecture of the application. CWE-701,CWE-656 5 Security focused code reviews can be one of the most effective ways to find security bugs. Regularly review your code looking for common issues like SQL Injection and Cross-Site Scripting. CWE-702 6 Conduct security testing both during and after development to ensure the application meets security standards. Testing should also be conducted after major releases to ensure vulnerabilities did not get introduced during the update process. . 7 All components of infrastructure that support the application should be configured according to security best practices and hardening guidelines. In a typical web application this can include routers, firewalls, network switches, operating systems, web servers, application servers, databases, and application frameworks. CWE-15, CWE-656 8 An incident handling plan should be drafted and tested on a regular basis. The contact list of people to involve in a security incident related to the application should be well defined and kept up to date. . 9 Training helps define a common language that the team can use to improve the security of the application. Education should not be confined solely to software developers, testers, and architects. Anyone associated with the development process, such as business analysts and project managers, should all have periodic software security awareness training. . ...","title":"Configurations and Operations"},{"location":"Contact/","text":"Contact Application Security Team Drop an email to dl-infosec-cloud-devops-security@marks-and-spencer.com","title":"Contact AppSec"},{"location":"Contact/#contact-application-security-team","text":"Drop an email to dl-infosec-cloud-devops-security@marks-and-spencer.com","title":"Contact Application Security Team"},{"location":"Cryptography/","text":"... # Security Requirement CWE 1 Verify that regulated private data is stored encrypted while at rest, such as Personally Identifiable Information (PII), sensitive personal information, or data assessed likely to be subject to EU's GDPR. CWE-311 2 Verify that regulated health data is stored encrypted while at rest, such as medical records, medical device details, or de-anonymized research records. CWE-311 3 Verify that regulated financial data is stored encrypted while at rest, such as financial accounts, defaults or credit history, tax records, pay history, beneficiaries, or de-anonymized market or research records. CWE-311 4 Verify that all cryptographic modules fail securely, and errors are handled in a way that does not enable Padding Oracle attacks. CWE-310 5 Verify that industry proven or government approved cryptographic algorithms, modes, and libraries are used, instead of custom coded cryptography. CWE-327 6 Verify that encryption initialization vector, cipher configuration, and block modes are configured securely using the latest advice. CWE-326 7 Verify that random number, encryption or hashing algorithms, key lengths, rounds, ciphers or modes, can be reconfigured, upgraded, or swapped at any time, to protect against cryptographic breaks. CWE-326 8 Verify that known insecure block modes (i.e. ECB, etc.), padding modes (i.e. PKCS#1 v1.5, etc.), ciphers with small block sizes (i.e. Triple-DES, Blowfish, etc.), and weak hashing algorithms (i.e. MD5, SHA1, etc.) are not used unless required for backwards compatibility. CWE-326 9 Verify that nonces, initialization vectors, and other single use numbers must not be used more than once with a given encryption key. The method of generation must be appropriate for the algorithm being used. CWE-326 10 Verify that encrypted data is authenticated via signatures, authenticated cipher modes, or HMAC to ensure that ciphertext is not altered by an unauthorized party. CWE-326 11 Verify that all cryptographic operations are constant-time, with no 'short-circuit' operations in comparisons, calculations, or returns, to avoid leaking information. CWE-385 12 Verify that all random numbers, random file names, random GUIDs, and random strings are generated using the cryptographic module's approved cryptographically secure random number generator when these random values are intended to be not guessable by an attacker. CWE-338 13 Verify that random GUIDs are created using the GUID v4 algorithm, and a Cryptographically-secure Pseudo-random Number Generator (CSPRNG). GUIDs created using other pseudo-random number generators may be predictable. CWE-338 14 Verify that random numbers are created with proper entropy even when the application is under heavy load, or that the application degrades gracefully in such circumstances. CWE-338 15 Verify that a secrets management solution such as a key vault is used to securely create, store, control access to and destroy secrets CWE-798 16 Verify that key material is not exposed to the application but instead uses an isolated security module like a vault for cryptographic operations. CWE-320 ...","title":"Cryptography"},{"location":"Data%20Protection/","text":"... # Security Requirement CWE 1 HTTPS should be used for your entire application. If you have to limit where it's used, then HTTPS must be applied to any authentication pages as well as to all pages after the user is authenticated. If sensitive information (e.g. personal information) can be submitted before authentication, those features must also be sent over. CWE-311,CWE-319,CWE-523 2 For all pages requiring protection by HTTPS, the same URL should not be accessible via the insecure HTTP channel. CWE-319 3 The Strict-Transport-Security header ensures that the browser does not talk to the server over HTTP. This helps reduce the risk of HTTP downgrade attacks as implemented by the sslsniff tool. . 4 User passwords must be stored using secure hashing techniques with strong algorithms like PBKDF2, bcrypt, or SHA-512. Simply hashing the password a single time does not sufficiently protect the password. Use adaptive hashing (a work factor), combined with a randomly generated salt for each user to make the hash strong. CWE-257 5 If encryption keys are exchanged or pre-set in your application then any key establishment or exchange must be performed over a secure channel . 6 When keys are stored in your system they must be properly secured and only accessible to the appropriate staff on a need to know basis. Example: AWS Key Management Service (KMS), Azure Key Vault, AWS CloudHSM CWE-320 7 Weak ciphers must be disabled on all servers. For example, SSL v2, SSL v3, and TLS protocols prior to 1.2 have known weaknesses and are not considered secure. Additionally, disable the NULL, RC4, DES, and MD5 cipher suites. Ensure all key lengths are greater than 128 bits, use secure renegotiation, and disable compression. . 8 HTTPS certificates should be signed by a reputable certificate authority. The name on the certificate should match the FQDN of the website. The certificate itself should be valid and not expired. . 9 Browser data caching should be disabled using the cache control HTTP headers or meta tags within the HTML page. Additionally, sensitive input fields, such as the login form, should have the autocomplete=off setting in the HTML form to instruct the browser not to cache the credentials. CWE-524 10 Conduct an evaluation to ensure that sensitive data is not being unnecessarily transported or stored. Where possible, use tokenization to reduce data exposure risks. . ...","title":"Data Protection"},{"location":"Error%20Handling%20and%20Logging/","text":"... # Security Requirement CWE 1 Error messages should not reveal details about the internal state of the application. For example, file system path and stack information should not be exposed to the user through error messages. CWE-209 2 Given the languages and frameworks in use for web application development, never allow an unhandled exception to occur. Error handlers should be configured to handle unexpected errors and gracefully return controlled output to the user. CWE-391 3 Your development framework or platform may generate default error messages. These should be suppressed or replaced with customized error messages as framework generated messages may reveal sensitive information to the user. CWE-209 4 Any authentication activities, whether successful or not, should be logged. CWE-778 5 Any activities or occasions where the user's privilege level changes should be logged. CWE-778 6 Any administrative activities on the application or any of its components should be logged. CWE-778 7 Any access to sensitive data should be logged. This is particularly important for corporations that have to meet regulatory requirements like HIPAA, PCI, or SOX. CWE-778 8 While logging errors and auditing access is important, sensitive data should never be logged in an unencrypted form. For example, under HIPAA and PCI, it would be a violation to log sensitive data into the log itself unless the log is encrypted on the disk. Additionally, it can create a serious exposure point should the web application itself become compromised. CWE-532 9 Logs should be stored and maintained appropriately to avoid information loss or tampering by intruder. Log retention should also follow the retention policy set forth by the organization to meet regulatory requirements and provide enough information for forensic and incident response activities. CWE-533 ...","title":"Access guide to security tools"},{"location":"Files%20and%20Resources/","text":"... # Security Requirement CWE 1 Verify that the application will not accept large files that could fill up storage or cause a denial of service. CWE-400 2 Verify that compressed files are checked for \"zip bombs\" - small input files that will decompress into huge files thus exhausting file storage limits. CWE-409 3 Verify that a file size quota and maximum number of files per user is enforced to ensure that a single user cannot fill up the storage with too many files, or excessively large files. CWE-770 4 Verify that files obtained from untrusted sources are validated to be of expected type based on the file's content. CWE-434 5 Verify that user-submitted filename metadata is not used directly by system or framework filesystems and that a URL API is used to protect against path traversal. CWE-22 6 Verify that user-submitted filename metadata is validated or ignored to prevent the disclosure, creation, updating or removal of local files (LFI). CWE-73 7 Verify that user-submitted filename metadata is validated or ignored to prevent the disclosure or execution of remote files via Remote File Inclusion (RFI) or Server-side Request Forgery (SSRF) attacks. CWE-98 8 Verify that the application protects against Reflective File Download (RFD) by validating or ignoring user-submitted filenames in a JSON, JSONP, or URL parameter, the response Content-Type header should be set to text/plain, and the Content-Disposition header should have a fixed filename. CWE-641 9 Verify that untrusted file metadata is not used directly with system API or libraries, to protect against OS command injection. CWE-78 10 Verify that the application does not include and execute functionality from untrusted sources, such as unverified content distribution networks, JavaScript libraries, node npm libraries, or server-side DLLs. CWE-829 11 Verify that files obtained from untrusted sources are stored outside the web root, with limited permissions, preferably with strong validation. CWE-922 12 Verify that files obtained from untrusted sources are scanned by antivirus scanners to prevent upload of known malicious content. CWE-509 13 Verify that the web tier is configured to serve only files with specific file extensions to prevent unintentional information and source code leakage. For example, backup files (e.g. .bak), temporary working files (e.g. .swp), compressed files (.zip, .tar.gz, etc) and other extensions commonly used by editors should be blocked unless required. CWE-552 14 Verify that direct requests to uploaded files will never be executed as HTML/JavaScript content. CWE-434 15 Verify that the web or application server is configured with an allow list of resources or systems to which the server can send requests or load data/files from. CWE-918 ...","title":"Files and Resources"},{"location":"ImmersiveLabs/","text":"Immersive Labs Immersive Labs is a lab absed learning platform that helps engineers develop their skills in cyber security. With something to suit all the roles from administration to technical architecture, to information governance and cyber analysis \u2013 it offers customised training all under one platform. Request Immersive Labs Access in AIG : Clickhere Login to Immersive Labs through below URL: Clickhere","title":"Immmersive Labs"},{"location":"ImmersiveLabs/#immersive-labs","text":"Immersive Labs is a lab absed learning platform that helps engineers develop their skills in cyber security. With something to suit all the roles from administration to technical architecture, to information governance and cyber analysis \u2013 it offers customised training all under one platform.","title":"Immersive Labs"},{"location":"ImmersiveLabs/#request-immersive-labs-access-in-aig","text":"Clickhere","title":"Request Immersive Labs Access in AIG :"},{"location":"ImmersiveLabs/#login-to-immersive-labs-through-below-url","text":"Clickhere","title":"Login to Immersive Labs through below URL:"},{"location":"Input%20and%20Output%20Validation/","text":"... # Security Requirement CWE 1 All output functions must contextually encode data before sending it to the user. Depending on where the output will end up in the HTML page, the output must be encoded differently. For example, data placed in the URL context must be encoded differently than data placed in JavaScript context within the HTML page. CWE-79 2 For each user input field, there should be validation on the input content. Allowlisting input is the preferred approach. Only accept data that meets a certain criteria. For input that needs more flexibility, blocklisting can also be applied where known bad input patterns or characters are blocked. CWE-159,CWE-144 3 SQL queries should be crafted with user content passed into a bind variable. Queries written this way are safe against SQL injection attacks. SQL queries should not be created dynamically using string concatenation. Similarly, the SQL query string used in a bound or parameterized query should never be dynamically built from user input. CWE-89,CWE-564 4 In order to prevent Cross-Site Request Forgery attacks, you must embed a random value that is not known to third parties into the HTML form. This CSRF protection token must be unique to each request. This prevents a forged CSRF request from being submitted because the attacker does not know the value of the token. CWE-352 5 For every page in your application set the encoding using HTTP headers or meta tags within HTML. This ensures that the encoding of the page is always defined and that browser will not have to determine the encoding on its own. Setting a consistent encoding, like UTF-8, for your application reduces the overall risk of issues like Cross-Site Scripting. CWE-172 6 When accepting file uploads from the user make sure to validate the size of the file, the file type, and the file contents as well as ensuring that it is not possible to override the destination path for the file. CWE-434,CWE-616,CWE-22 7 When hosting user uploaded content which can be viewed by other users, use the X-Content-Type-Options: nosniff header so that browsers do not try to guess the data type. Sometimes the browser can be tricked into displaying the data type incorrectly (e.g. showing a GIF file as HTML). Always let the server or application determine the data type. CWE-430 8 The source of the input must be validated. For example, if input is expected from a POST request do not accept the input variable from a GET request. CWE-20,CWE-346 9 Use the X-Frame-Options header to prevent content from being loaded by a foreign site in a frame. This mitigates Clickjacking attacks. For older browsers that do not support this header add framebusting Javascript code to mitigate Clickjacking (although this method is not foolproof and can be circumvented). CWE-693 10 The Content Security Policy (CSP), X-XSS-Protection, X-Content-Type-Options headers help defend against Cross-Site Scripting(XSS) attack. In specific, CSP should be customized for the application to lock down the source and location of content plus adding logging to provide some attack detection capability on the front end. CWE-79,CWE-692 11 When handling serialized data from untrusted source (or passing through untrusted paths), proper controls have to be in place to prevent attacker from abusing the automatic data structure rebuilding capability within the programming language. Each programming platform has its own mitigation strategy which range from using alternative data interchange format such as JSON to restricting the types of objects that can be deserialized. Refer to OWASP Deserialization Cheat Sheet for some great defense information. CWE-502 ...","title":"Input and Output Validation"},{"location":"Malicious%20Code/","text":"... # Security Requirement CWE 1 Verify that a code analysis tool is in use that can detect potentially malicious code, such as time functions, unsafe file operations and network connections. CWE-749 2 Verify that the application source code and third party libraries do not contain unauthorized phone home or data collection capabilities. Where such functionality exists, obtain the user's permission for it to operate before collecting any data. CWE-359 3 Verify that the application does not ask for unnecessary or excessive permissions to privacy related features or sensors, such as contacts, cameras, microphones, or location. CWE-272 4 Verify that the application source code and third party libraries do not contain back doors, such as hard-coded or additional undocumented accounts or keys, code obfuscation, undocumented binary blobs, rootkits, or anti-debugging, insecure debugging features, or otherwise out of date, insecure, or hidden functionality that could be used maliciously if discovered. CWE-507 5 Verify that the application source code and third party libraries do not contain time bombs by searching for date and time related functions. CWE-511 6 Verify that the application source code and third party libraries do not contain malicious code, such as salami attacks, logic bypasses, or logic bombs. CWE-511 7 Verify that the application source code and third party libraries do not contain Easter eggs or any other potentially unwanted functionality. CWE-507 8 Verify that if the application has a client or server auto-update feature, updates should be obtained over secure channels and digitally signed. The update code must validate the digital signature of the update before installing or executing the update. CWE-16 9 Verify that the application employs integrity protections, such as code signing or subresource integrity. The application must not load or execute code from untrusted sources, such as loading includes, modules, plugins, code, or libraries from untrusted sources or the Internet. CWE-353 10 Verify that the application has protection from subdomain takeovers if the application relies upon DNS entries or DNS subdomains, such as expired domain names, out of date DNS pointers or CNAMEs, expired projects at public source code repos, or transient cloud APIs, serverless functions, or storage buckets (autogen-bucket-id.cloud.example.com) or similar. Protections can include ensuring that DNS names used by applications are regularly checked for expiry or change. CWE-350 ...","title":"Malicious Code"},{"location":"SKF/","text":"Security Knoweldge Framework(SKF)? The OWASP Security Knowledge Framework is an open source web application that explains secure coding principles in multiple programming languages. The goal of OWASP-SKF is to help you learn and integrate security by design in your software development and build applications that are secure by design. How to access SKF? Provide details here.","title":"Security Knowledge Framework"},{"location":"SKF/#security-knoweldge-frameworkskf","text":"The OWASP Security Knowledge Framework is an open source web application that explains secure coding principles in multiple programming languages. The goal of OWASP-SKF is to help you learn and integrate security by design in your software development and build applications that are secure by design.","title":"Security Knoweldge Framework(SKF)?"},{"location":"SKF/#how-to-access-skf","text":"Provide details here.","title":"How to access SKF?"},{"location":"Session%20Management/","text":"... # Security Requirement CWE 1 Session tokens must be generated by secure random functions and must be of a sufficient length so as to withstand analysis and prediction. CWE-6 2 Session tokens should be regenerated when the user authenticates to the application and when the user privilege level changes. Additionally, should the encryption status change, the session token should always be regenerated. CWE-384 3 When a user is not active, the application should automatically log the user out. Be aware that Ajax applications may make recurring calls to the application effectively resetting the timeout counter automatically. CWE-613 4 Users should be logged out after an extensive amount of time (e.g. 4-8 hours) has passed since they logged in. This helps mitigate the risk of an attacker using a hijacked session. CWE-613 5 Unless the application requires multiple simultaneous sessions for a single user, implement features to detect session cloning attempts. Should any sign of session cloning be detected, the session should be destroyed, forcing the real user to re-authenticate. . 6 When the user logs out of the application the session and corresponding data on the server must be destroyed. This ensures that the session can not be accidentally revived. CWE-613 7 The logout button or logout link should be easily accessible to the user on every page after they have authenticated. . 8 The session cookie should be set with both the HttpOnly and the Secure flags. This ensures that the session id will not be accessible to client-side scripts and it will only be transmitted over HTTPS, respectively. In addition, the SameSite attribute should be set to with either lax or straight mode to reduce the risk of Cross Site Request Forgery. CWE-79, CWE-614,CWE-1004 9 The cookie domain and path scope should be set to the most restrictive settings for your application. Any wildcard domain scoped cookie must have a good justification for its existence. . 10 The session cookie should have a reasonable expiration time. Non-expiring session cookies should be avoided. . ...","title":"Session Management"},{"location":"TM/","text":"Threat Modeling: intro and workflow Threat modeling works to identify, communicate, and understand threats and mitigations within the context of protecting something of value. A threat model is a structured representation of all the information that affects the security of an application. Why should we do Threat Modelling? Makes our software more secure Little time investment early means saved time later Saves M&S money and reputation It's easy to get started To get started: Raise a request on InfoSec Hub https://cyb-eun-prd-cygraph-app1.azurewebsites.net/demand/catalogue Raise the request under \"Request for AppSec Security Assistance\" on Infosec hub Please send us links to your projects, codebase and architecture diagrams We will arrange 2 sessions: intro session(45mins) and actual Threat Modelling session(45min) Outcomes : List of all found potential vulnerabilities & weaknesses and areas of improvement Prioritize list of challenges to be remediated The following four question framework can help to organize threat modeling: What are we working on? What can go wrong? What are we going to do about it? Did we do a good job? There are many methods or techniques that can be used to answer each of these questions. There is no \u201cright\u201d way to evaluate the search space of possible threats, but structured models exist in order to help make the process more efficient.","title":"TM"},{"location":"TM/#threat-modeling-intro-and-workflow","text":"Threat modeling works to identify, communicate, and understand threats and mitigations within the context of protecting something of value. A threat model is a structured representation of all the information that affects the security of an application.","title":"Threat Modeling: intro and workflow"},{"location":"TM/#why-should-we-do-threat-modelling","text":"Makes our software more secure Little time investment early means saved time later Saves M&S money and reputation It's easy to get started","title":"Why should we do Threat Modelling?"},{"location":"TM/#to-get-started","text":"Raise a request on InfoSec Hub https://cyb-eun-prd-cygraph-app1.azurewebsites.net/demand/catalogue Raise the request under \"Request for AppSec Security Assistance\" on Infosec hub Please send us links to your projects, codebase and architecture diagrams We will arrange 2 sessions: intro session(45mins) and actual Threat Modelling session(45min) Outcomes : List of all found potential vulnerabilities & weaknesses and areas of improvement Prioritize list of challenges to be remediated","title":"To get started:"},{"location":"TM/#the-following-four-question-framework-can-help-to-organize-threat-modeling","text":"What are we working on? What can go wrong? What are we going to do about it? Did we do a good job? There are many methods or techniques that can be used to answer each of these questions. There is no \u201cright\u201d way to evaluate the search space of possible threats, but structured models exist in order to help make the process more efficient.","title":"The following four question framework can help to organize threat modeling:"},{"location":"Web%20Service/","text":"... # Security Requirement CWE 1 Verify that all application components use the same encodings and parsers to avoid parsing attacks that exploit different URI or file parsing behavior that could be used in SSRF and RFI attacks. CWE-116 2 Verify that access to administration and management functions is limited to authorized administrators. CWE-419 3 Verify API URLs do not expose sensitive information, such as the API key, session tokens etc. CWE-598 4 Verify that authorization decisions are made at both the URI, enforced by programmatic or declarative security at the controller or router, and at the resource level, enforced by model-based permissions. CWE-285 5 Verify that requests containing unexpected or missing content types are rejected with appropriate headers (HTTP response status 406 Unacceptable or 415 Unsupported Media Type). CWE-434 6 Verify that enabled RESTful HTTP methods are a valid choice for the user or action, such as preventing normal users using DELETE or PUT on protected API or resources. CWE-650 7 Verify that JSON schema validation is in place and verified before accepting input. CWE-20 8 Verify that RESTful web services that utilize cookies are protected from Cross-Site Request Forgery via the use of at least one or more of the following: double submit cookie pattern, CSRF nonces, or Origin request header checks. CWE-352 9 Verify that REST services have anti-automation controls to protect against excessive calls, especially if the API is unauthenticated. CWE-770 10 Verify that REST services explicitly check the incoming Content-Type to be the expected one, such as application/xml or application/json. CWE-436 11 Verify that the message headers and payload are trustworthy and not modified in transit. Requiring strong encryption for transport (TLS only) may be sufficient in many cases as it provides both confidentiality and integrity protection. Per-message digital signatures can provide additional assurance on top of the transport protections for high-security applications but bring with them additional complexity and risks to weigh against the benefits. CWE-345 12 Verify that XSD schema validation takes place to ensure a properly formed XML document, followed by validation of each input field before any processing of that data takes place. CWE-20 13 Verify that the message payload is signed using WS-Security to ensure reliable transport between client and service. CWE-345 14 Verify that a query allow list or a combination of depth limiting and amount limiting is used to prevent GraphQL or data layer expression Denial of Service (DoS) as a result of expensive, nested queries. For more advanced scenarios, query cost analysis should be used. CWE-770 15 Verify that GraphQL or other data layer authorization logic should be implemented at the business logic layer instead of the GraphQL layer. CWE-285 ...","title":"Web Service"},{"location":"Tools/FOD/","text":"Fortify On Demand(FOD) At M&S FOD is being used for Static Application Security Testing (SAST) and Dynamic Application Security Testing (DAST).","title":"FOD"},{"location":"Tools/FOD/#fortify-on-demandfod","text":"At M&S FOD is being used for Static Application Security Testing (SAST) and Dynamic Application Security Testing (DAST).","title":"Fortify On Demand(FOD)"},{"location":"Tools/ToolsAndServices/","text":"... Scan Type Functionality Toolset Static Application Security Testing (SAST): Scan of application source code is conducted FOD Software Composition Analysis (SCA): Scan of third party and open-source components is conducted (Dependency scan) Snyk Dynamic Application Security Testing (DAST): Dynamic scan of web applications is conducted FOD Container and Image Scans Container and Image scans are conducted and provides runtime protection. Prisma Cloud Secret Scan Analyze & find secrets such as private keys, passwords, certificates in the organization\u2019s resource TruffleHog IAC Scanning Infrastructure as a code files are scanned Prisma Cloud Defender for Cloud Cloud Posture management and compliance through secure score scanning Azure Defender for cloud Azure PIM Akamai WAF and DDOS - Volumetric Edge protection for applications Akamai ...","title":"Tooling And Services"}]}